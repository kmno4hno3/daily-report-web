generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model sqlx_migrations {
  version       BigInt   @id
  description   String
  installedOn   DateTime @default(now()) @map("installed_on") @db.Timestamptz(6)
  success       Boolean
  checksum      Bytes
  executionTime BigInt   @map("execution_time")

  @@map("_sqlx_migrations")
}

model Report {
  id        BigInt   @id @default(autoincrement())
  date      DateTime @unique(map: "idx_reports_date") @db.Date
  content   String?
  createdAt DateTime @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @map("updated_at") @db.Timestamptz(6)
  userId    BigInt   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("reports")
}

model User {
  id            BigInt    @id @default(autoincrement())
  name          String?   @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  password      String?   @db.VarChar(255)
  createdAt     DateTime  @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @default(dbgenerated("(now() AT TIME ZONE 'Asia/Tokyo'::text)")) @map("updated_at") @db.Timestamptz(6)
  image         String?
  emailVerified DateTime? @map("email_verified") @db.Timestamp(6)
  accounts      Account[]
  reports       Report[]

  @@map("users")
}

model Account {
  id                BigInt  @id @default(autoincrement())
  userId            BigInt  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verification_tokens")
}
